#!/usr/bin/env python3
"""
An utility to convert source models into ruptures
"""
import os
import logging
import operator
import numpy
import pandas
from openquake.baselib import sap, parallel, general, hdf5
from openquake.commonlib import logs
from openquake.calculators import base

U32 = numpy.uint32
F32 = numpy.float32
rate_lst = [('src_id', U32), ('num_ruptures', U32), ('rates', hdf5.vfloat32)]
rate_dt = numpy.dtype(rate_lst)

# NB: this is called after a preclassical calculation
def build_rates(srcs):
    """
    :param srcs: a list of split sources of the same source group
    """
    out = {'src_id': [], 'rup_id': [], 'rate': []}
    for src in srcs:
        for i, rup in enumerate(src.iter_ruptures()):
            out['src_id'].append(src.id)
            out['rup_id'].append(src.offset + i)
            out['rate'].append(rup.occurrence_rate * .1)
    return pandas.DataFrame(out)


def build_delta_rates(csm, dstore):
    """
    :param csm: CompositeSourceModel instance
    :param dstore: DataStore where to save the ruptures
    """
    def src_weight(src):
        # make point sources 100x lighter
        return (.01 if src.code == b'P' else 1) * src.num_ruptures

    sources = csm.get_sources()
    dfs = list(parallel.Starmap.apply(
        build_rates, (sources,), weight=src_weight,
        key=operator.attrgetter('grp_id'), h5=dstore,
        concurrent_tasks=1000))
    logging.info('Sorting rates')
    df = pandas.concat(dfs).sort_values(['src_id', 'rup_id'])
    size = 0
    all_rates = []
    num_ruptures = dstore['source_info']['num_ruptures']
    logging.info('Grouping rates by %d src_id', len(num_ruptures))
    for src_id, grp in df.groupby('src_id'):
        assert len(grp) == num_ruptures[src_id]
        all_rates.extend(F32(grp.rate.to_numpy()))
        size += len(grp) * 4
    logging.info('Storing {} inside {}::/delta_rates'.format(
        general.humansize(size), dstore.filename))
    dstore.hdf5.save_vlen('delta_rates', all_rates)


def main(job_ini):
    """
    Run a preclassical and store a dataset delta_rates
    """
    calc = base.run_calc(job_ini, calculation_mode='preclassical')
    build_delta_rates(calc.csm, calc.datastore)


if __name__ == '__main__':
    sap.run(main)
