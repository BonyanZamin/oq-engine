#!/bin/env python
# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright (C) 2023, GEM Foundation
#
# OpenQuake is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OpenQuake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.

import os
import numpy
from openquake.baselib import general, hdf5, sap
from openquake.baselib.parallel import Starmap
from openquake.hazardlib.geo.utils import geohash3
from openquake.commonlib.datastore import build_dstore_log
from openquake.risklib.asset import _get_exposure

U16 = numpy.uint16
U32 = numpy.uint32
F32 = numpy.float32
CONV = {n: F32 for n in '''
BUILDINGS COST_CONTENTS_USD COST_NONSTRUCTURAL_USD COST_PER_AREA_USD
COST_STRUCTURAL_USD LATITUDE LONGITUDE OCCUPANTS_PER_ASSET
OCCUPANTS_PER_ASSET_AVERAGE OCCUPANTS_PER_ASSET_DAY
OCCUPANTS_PER_ASSET_NIGHT OCCUPANTS_PER_ASSET_TRANSIT
TOTAL_AREA_SQM TOTAL_REPL_COST_USD'''.split()}
CONV[None] = str
IGNORE = set('NAME_0 NAME_1 SETTLEMENT'.split())


def add_geohash3(array):
    if len(array) == 0:
        return ()
    dt = array.dtype
    dtlist = [('geohash3', U16)] + [(n, dt[n]) for n in dt.names]
    out = numpy.zeros(len(array), dtlist)
    for n in dt.names:
        out[n] = array[n]
        out['geohash3'] = geohash3(array['LONGITUDE'], array['LATITUDE'])
    return out


def fix(arr):
    ID0 = arr['ID_0']
    ID1 = arr['ID_1']
    arr['ASSET_ID'] = ID0 + arr['ASSET_ID']
    for i, (id0, id1) in enumerate(zip(ID0, ID1)):
        if not id1.startswith(id0):
            ID1[i] = id0 + ID1[i]


def exposure_by_geohash(fname, common, monitor):
    aw = hdf5.read_csv(fname + '.bak', CONV, errors='ignore')
    if hasattr(aw, 'array') and len(aw.array):
        for slc in general.gen_slices(0, len(aw.array), 1_000_000):
            arr = add_geohash3(aw.array[slc][common])
            fix(arr)
            for gh in numpy.unique(arr['geohash3']):
                yield gh, arr[arr['geohash3']==gh]


def collect_exposures(grm_dir):
    """
    Collect the files of kind Exposure_<Country>.xml
    """
    out = []
    for region in os.listdir(grm_dir):
        expodir = os.path.join(grm_dir, region, 'Exposure', 'Exposure')
        if not os.path.exists(expodir):
            continue
        for fname in os.listdir(expodir):
            if fname.startswith('Exposure_'):  # i.e. Exposure_Chile.xml
                out.append(os.path.join(expodir, fname))
    return out


def read_world_exposure(grm_dir, dstore):
    """
    Read the exposure files for the entire world (assume some conventions
    on the file names are respected).

    :param grm_dir: directory containing the global risk model
    """
    fnames = collect_exposures(grm_dir)
    csvfiles = []
    for fname in fnames:
        exposure, _ = _get_exposure(fname)
        csvfiles.extend(exposure.datafiles)

    common = sorted(hdf5.read_common_header(csvfiles) - IGNORE)
    assert common, 'There is no common header subset among %s' % csvfiles

    dstore.create_df('exposure', [(c, F32 if c in CONV else hdf5.vstr)
                                  for c in common])
    slc_dt = numpy.dtype([('gh3', U16), ('start', U32), ('stop', U32)])
    dstore.create_dset('exposure/slice_by_gh3', slc_dt, fillvalue=None)
    smap = Starmap(exposure_by_geohash, [(c, common) for c in csvfiles],
                   h5=dstore.hdf5)
    s = 0
    for gh3, arr in smap:
        for name in common:
             hdf5.extend(dstore[f'exposure/{name}'], arr[name])
        n = len(arr)
        slc = numpy.array([(gh3, s, s + n)], slc_dt)
        hdf5.extend(dstore['exposure/slice_by_gh3'], slc)
        s += n
    print(dstore)


def main(grm_dir):
    dstore, log = build_dstore_log()
    with dstore, log:
        read_world_exposure(grm_dir, dstore)
main.grm_dir = 'global risk model directory'


if __name__ == '__main__':
    sap.run(main)
