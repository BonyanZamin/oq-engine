#!/bin/env python
# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright (C) 2023, GEM Foundation
#
# OpenQuake is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OpenQuake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.

import os
import numpy
from openquake.baselib import general, hdf5, sap
from openquake.baselib.parallel import Starmap
from openquake.commonlib.datastore import build_dstore_log
from openquake.risklib.asset import _get_exposure, add_geohash


def exposure_by_geohash(fname, common, monitor):
    aw = hdf5.read_csv(fname, {None: str}, errors='ignore')
    if hasattr(aw, 'array') and len(aw.array):
        for slc in general.gen_slices(0, len(aw.array), 1_000_000):
            arr = add_geohash(aw.array[slc][common])
            for gh in numpy.unique(arr['geohash']):
                yield gh.decode('utf8'), arr[arr['geohash']==gh]


def collect_exposures(grm_dir):
    """
    Collect the files of kind Exposure_<Country>.xml
    """
    out = []
    for region in os.listdir(grm_dir):
        expodir = os.path.join(grm_dir, region, 'Exposure', 'Exposure')
        if not os.path.exists(expodir):
            continue
        for fname in os.listdir(expodir):
            if fname.startswith('Exposure_'):  # i.e. Exposure_Chile.xml
                out.append(os.path.join(expodir, fname))
    return out


def read_world_exposure(grm_dir, dstore):
    """
    Read the exposure files for the entire world (assume some conventions
    on the file names are respected).

    :param grm_dir: directory containing the global risk model
    """
    fnames = collect_exposures(grm_dir)
    csvfiles = []
    for fname in fnames:
        exposure, _ = _get_exposure(fname)
        csvfiles.extend(exposure.datafiles)

    common = hdf5.read_common_header(csvfiles)
    assert common, 'There is no common header subset among %s' % csvfiles
    dstore.create_df('exposure', [(c, hdf5.vstr) for c in common], 'gzip')
    smap = Starmap(exposure_by_geohash, [(c, common) for c in csvfiles],
                   h5=dstore.hdf5)
    n = 0
    for k, v in smap:
        for name in common:
             hdf5.extend(dstore[f'exposure/{name}'], v[name])
        n += len(v)
    print(dstore)


def main(grm_dir):
    dstore, log = build_dstore_log()
    with dstore, log:
        read_world_exposure(grm_dir, dstore)
main.grm_dir = 'global risk model directory'


if __name__ == '__main__':
    sap.run(main)
